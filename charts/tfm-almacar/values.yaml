# Default values for tfm-almacar application.
# Declare variables to be passed into your templates.

global:
  kafka:
    host: tfm-almacar-kafka
    port: 9092
  dal:
    host: tfm-almacar-dal
    port: 50057
    jvm:
      startheapmemory: 128m
      maxheapmemory: 256m
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  mysql:
    host: tfm-almacar-mysql
    port: 3306
  stockchecker:
    threshold: 2
    rest:
      host: localhost
      port: 8082
      endpoint: order
    jvm:
      startheapmemory: 128m
      maxheapmemory: 256m
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  restapi:
    jvm:
      startheapmemory: 128m
      maxheapmemory: 256m
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

kafka:
  headless:
    port: 9092
  replicas: 1
  configurationOverrides:
    "offsets.topic.replication.factor": 1
  #external:
    #enabled: True
    #servicePort: '19092'
  zookeeper:
    replicaCount: 1

elastic-stack:
  # Default values for elk.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.
  elasticsearch:
    enabled: true
  
  kibana:
    enabled: true
    env:
      ELASTICSEARCH_HOSTS : "http://tfm-almacar-elasticsearch-client:9200"
      ELASTICSEARCH_URL : "http://tfm-almacar-elasticsearch-client:9200"
  
  logstash:
    enabled: true
    # elasticsearch:
    #   host: elastic-stack-elasticsearch-client
  
  filebeat:
    enabled: false
    # config:
    #   output.file.enabled: false
    #   output.logstash:
    #     hosts: ["elastic-stack-logstash:5044"]
    # indexTemplateLoad:
    #   - elastic-stack-elasticsearch-client:9200
  
  fluentd:
    enabled: false
  
  fluent-bit:
    enabled: false
  
  fluentd-elasticsearch:
    enabled: false

  nginx-ldapauth-proxy:
    enabled: false
  # Example config to get it working with ELK. Adjust as you need to.
  # proxy:
  #   port: 5601
  #   # This is the internal hostname for the kibana service
  #   host: "elk-kibana.default.svc.cluster.local"
  #   authName: "ELK:Infrastructure:LDAP"
  #   ldapHost: "ldap.example.com"
  #   ldapDN: "dc=example,dc=com"
  #   ldapFilter: "objectClass=organizationalPerson"
  #   ldapBindDN: "cn=reader,dc=example,dc=com"
  #   requires:
  #     - name: "ELK-USER"
  #       filter: "cn=elkuser,ou=groups,dc=example,dc=com"
  # ingress:
  #   enabled: true
  #   hosts:
  #     - "elk.example.com"
  #   annotations:
  #     kubernetes.io/ingress.class: nginx
  #   tls:
  #     - hosts:
  #       - elk.example.com
  #       secretName: example-elk-tls
  # secrets:
  #   ldapBindPassword: PASSWORD
  elasticsearch-curator:
    enabled: false

  elasticsearch-exporter:
    enabled: false

restapi:
  replicaCount: 1
  service:
    type: NodePort
    port: 8080

dal:
  replicaCount: 1

stockchecker:
  replicaCount: 1
